//file:noinspection GroovyAssignabilityCheck
plugins {
	id 'java'
	id 'org.springframework.boot' version '3.1.3'
	id 'io.spring.dependency-management' version '1.1.3'
	id "org.owasp.dependencycheck" version '8.4.0'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '17'

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	testImplementation 'com.h2database:h2:2.2.222'
	implementation 'com.mysql:mysql-connector-j:8.1.0'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.springframework.security:spring-security-test'
}



// Test logging - standardOut, started, passed, skipped, failed
tasks.named('test') {
	useJUnitPlatform()
	testLogging {
		events 	"passed", // prints the name of the test that passed
				"skipped", // prints the name of the test that was skipped
				"failed" // prints the name of the test that failed
				//"standardOut" // prints the standard(log) output of the test
				//"started" // prints the name of the test that started
	}
	afterSuite { desc, result -> // prints the results of the test
		if (!desc.parent) { // will match the outermost suite
			def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} passed, ${result.failedTestCount} failed, ${result.skippedTestCount} skipped)"
			def startItem = '|  ', endItem = '  |'
			def repeatLength = startItem.length() + output.length() + endItem.length()
			println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))

			// Adding a link to the Gradle report if all the tests passed, since gradle already does this for failed tests
			if (result.failedTestCount == 0) {
				def reportFile = new File("${project.buildDir}/reports/tests/test/index.html")
				def reportUri = reportFile.toURI().toString().replaceFirst("file:/", "file:///")
				println("All tests passed, see the report at: ${reportUri}")
			}
		}
	}
}

bootJar {
	archiveFileName = "${archiveBaseName.get()}.${archiveExtension.get()}"
}